side_menu = document.getElementById("side_menu");
side_menu_width = 0;
let selecteed_node_id = 0;


// Calculate width of the side menu for a adjustment os node position
if (side_menu){
    side_menu_width = side_menu.offsetWidth;
    console.log(side_menu_width);
}

$('.drag').draggable({
  appendTo: 'body',
  helper: 'clone'
});

$('#network_scheme').droppable({
  activeClass: 'active',
  hoverClass: 'hover',
  accept: ":not(.ui-sortable-helper)", // Reject clones generated by sortable
  drop: function (e, ui) {
      type = ui.draggable.prop('id')

      if (GetNetworkState()){
          return;
      }

      if (type === 'host'){
          node_id = HostUid();
          nodes.push(
              {
                  data: {id: node_id, label: node_id},
                  renderedPosition: {x: ui.position.left - side_menu_width, y: ui.position.top},
                  classes: ['host'],
                  config: {
                      type: 'host',
                      label: node_id,
                  },
                  interface: [],
              }
          );

          // post new nodes to the server
          PostNodes();
          DrawGraph(nodes, edges);
          return;
      }

      if (type === 'l2_switch'){
          node_id = l2SwitchUid();
          nodes.push(
              {
                  data: {id: node_id, label: node_id},
                  renderedPosition: {x: ui.position.left - side_menu_width, y: ui.position.top},
                  classes: ['l2_switch'],
                  config: {
                      type: 'l2_switch',
                      label: node_id,
                  },
                  interface: [],
              }
          );

          PostNodes();
          DrawGraph(nodes, edges);
          return;
      }
  }
});

$('#NetworkRunButton').click(function() {

    if (GetNetworkState()){
        $(this).text('Запустить');
        $(this).removeClass('btn-warning');
        $(this).addClass('btn-success');

        SetNetworkState(0);
        DrawGraph(nodes, edges);
    } else {
        $(this).text('Остановить');
        $(this).removeClass('btn-success');
        $(this).addClass('btn-warning');

        let pkt_id = PacketUid();
        let pkt_id2 = PacketUid();

        pkt_array = [
            {
                data: {id: pkt_id, label: 'ARP request', type: 'packet'},
                config:{
                    type: 'ARP request',
                    path: 'edge_las0sa7mo4903wdz54t',
                    source: 'host_las0s8t5fmtx2xm3cdb',
                    target: 'l2_switch_las0s9fc0tey23820d'
                }
            },
            {
                data: {id: pkt_id2, label: 'ARP reply', type: 'packet'},
                config:{
                    type: 'ARP reply',
                    path: 'edge_las0sa7mo4903wdz54t',
                    source: 'l2_switch_las0s9fc0tey23820d',
                    target: 'host_las0s8t5fmtx2xm3cdb'
                }
            },
        ]

        SetNetworkState(1);
        cyy = DrawGraphStatic(nodes, edges, pkt_array);
    }

})