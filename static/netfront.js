side_menu = document.getElementById("side_menu");
side_menu_width = 0;
let selecteed_node_id = 0;


// Calculate width of the side menu for a adjustment os node position
if (side_menu){
    side_menu_width = side_menu.offsetWidth;
    console.log(side_menu_width);
}

$('.drag').draggable({
  appendTo: 'body',
  helper: 'clone'
});

$('#network_scheme').droppable({
  activeClass: 'active',
  hoverClass: 'hover',
  accept: ":not(.ui-sortable-helper)", // Reject clones generated by sortable
  drop: function (e, ui) {
      type = ui.draggable.prop('id')

      if (GetNetworkState() === 3){
          return;
      }

      // We add new device. Drop the network state.
      if (GetNetworkState()){
        SetNetworkRunButtonState(0, null);
      }

      if (type === 'host'){
          node_id = HostUid();
          nodes.push(
              {
                  data: {id: node_id, label: node_id},
                  renderedPosition: {x: ui.position.left - side_menu_width, y: ui.position.top},
                  classes: ['host'],
                  config: {
                      type: 'host',
                      label: node_id,
                  },
                  interface: [],
              }
          );

          // post new nodes to the server
          PostNodes();
          DrawGraph(nodes, edges);
          return;
      }

      if (type === 'l2_switch'){
          node_id = l2SwitchUid();
          nodes.push(
              {
                  data: {id: node_id, label: node_id},
                  renderedPosition: {x: ui.position.left - side_menu_width, y: ui.position.top},
                  classes: ['l2_switch'],
                  config: {
                      type: 'l2_switch',
                      label: node_id,
                  },
                  interface: [],
              }
          );

          PostNodes();
          DrawGraph(nodes, edges);
          return;
      }
  }
});

$('#NetworkRunButton').click(function() {

    // Run simulating
    if (GetNetworkState() === 0)
    {
        $(this).text('Симуляция');
        $(this).removeClass('btn-primary');
        $(this).addClass('btn-secondary');
        $(this).prop('disabled', true);

        RunSimulation(network_guid);
        SetNetworkState(1);
        return;
    }

    // Network in running
    if (GetNetworkState() === 2) {

        // Do we got a packets?
        if (!packets){
            console.log("Don't have a packets");
            return;
        }

        $(this).text('Стоп');
        $(this).removeClass('btn-success');
        $(this).addClass('btn-danger');

        SetNetworkState(3);

        let pkt_array = [
            [
                {
                    data: {id: PacketUid(), label: 'ARP request', type: 'packet'},
                    config:{
                        type: 'ARP request',
                        path: 'edge_law8a484xvch79flkbr',
                        source: 'host_law8a3d4xeer4q5tzwg',
                        target: 'l2_switch_las0s9fc0tey23820d'
                    }
                }
            ],
            [
                {
                    data: {id: PacketUid(), label: 'ARP reply', type: 'packet'},
                    config: {
                        type: 'ARP reply',
                        path: 'edge_law8a484xvch79flkbr',
                        source: 'l2_switch_las0s9fc0tey23820d',
                        target: 'host_law8a3d4xeer4q5tzwg'
                    }
                }
            ],
            [
                {
                    data: {id: PacketUid(), label: 'ICMP request', type: 'packet'},
                    config:{
                        type: 'ICMP request',
                        path: 'edge_law8c7aywfigqotywpj',
                        source: 'host_law8c6izj98ig8idt9g',
                        target: 'l2_switch_las0s9fc0tey23820d'
                    }
                }
            ],
            [
                {
                    data: {id: PacketUid(), label: 'ICMP reply', type: 'packet'},
                    config: {
                        type: 'ICMP reply',
                        path: 'edge_law8c7aywfigqotywpj',
                        source: 'l2_switch_las0s9fc0tey23820d',
                        target: 'host_law8c6izj98ig8idt9g'
                    }
                }
            ],
        ]
        DrawGraphStatic(nodes, edges, pkt_array);

        let timeout_last_id = window.setTimeout(function () {
        }, 0);

        while (timeout_last_id--) {
            window.clearTimeout(timeout_last_id); // will do nothing if no timeout with id is present
        }
    }

    if (GetNetworkState() === 3)
    {
        // Do we got a packets?
        if (!packets){
            $(this).text('Симулировать');
            $(this).removeClass('btn-danger');
            $(this).addClass('btn-primary');

            SetNetworkState(0);
            return;
        }

        $(this).text('Запустить');
        $(this).removeClass('btn-danger');
        $(this).addClass('btn-success');

        SetNetworkState(2);
        return;
    }
})