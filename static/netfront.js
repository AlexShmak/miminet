side_menu = document.getElementById("side_menu");
side_menu_width = 0;
let shifted = false;

// Calculate width of the side menu for a adjustment os node position
if (side_menu){
    side_menu_width = side_menu.offsetWidth;
    console.log(side_menu_width);
}

$('.drag').draggable({
  appendTo: 'body',
  helper: 'clone'
});

$('#network_scheme').droppable({
  activeClass: 'active',
  hoverClass: 'hover',
  accept: ":not(.ui-sortable-helper)", // Reject clones generated by sortable
  drop: function (e, ui) {
      type = ui.draggable.prop('id')

      if (type === 'host'){
          nodes.push(
              {
                  data: {id: HostUid()},
                  renderedPosition: {x: ui.position.left - side_menu_width, y: ui.position.top},
                  classes: ['host'],
                  config: {
                      type: 'host',
                  }
              }
          );
          DrawGraph(nodes, edges);
          return;
      }

      if (type === 'l2_switch'){
          nodes.push(
              {
                  data: {id: l2SwitchUid()},
                  renderedPosition: {x: ui.position.left - side_menu_width, y: ui.position.top},
                  classes: ['l2_switch'],
                  config: {
                      type: 'l2_switch',
                  }
              }
          );
          DrawGraph(nodes, edges);
          return;
      }
  }
});

